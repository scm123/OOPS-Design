public class Twitter {
    private static int timeStamp=0;

    // easy to find if user exist
    private Map<Integer, User> userMap;
   

   private class Tweet{
        public int tweetId;
        public int time;
        public Tweet next;

        public Tweet(int tweetId){
            this.tweetId = tweetId;
            time = timeStamp++;
            next=null;
        }
    }

  public class User{
        public int userId;
        public Set<Integer> followed;
        public Tweet tweet_head;

        User(int userId){
           this.userId=userId;
           this.followed=new HashSet<>();
           this.follow(userId);
           this.tweet_head=null;
        }

        public void follow(int userId){
          followed.add(userId);
        }

        public void unfollow(int userId){
          followed.remove(userId);
        }

        public void post(int tweet_id){
         Tweet tweet=new Tweet(tweet_id);
         tweet.next=tweet_head;
         tweet_head=tweet;
        }
  }

   public Twitter() {
        userMap = new HashMap<Integer, User>();
   }

   public void postTweet(int userId, int tweetId) {     
     if(!userMap.containsKey(userId)){
       User user=new User(userId); 
       userMap.put(userId,user);
     }
      userMap.get(userId).post(tweetId);
   }

   public List<Integer> getNewsFeed(int userId) {
      List<Integer> result=new LinkedList<>();
      if(!userMap.containsKey(userId) ) return result;
       
      Set<Integer> users=userMap.get(userId).followed;
      PriorityQueue<Tweet> pq=new PriorityQueue<>((a,b)->(b.time-a.time));
      for( int id: users){
        Tweet t=userMap.get(id).tweet_head;
        if(t!=null) pq.add(t);
      }

      int count=0;
      while(!pq.isEmpty() && count<10){
        Tweet t=pq.poll();
        count++;
        result.add(t.tweetId);
        if(t.next!=null) pq.add(t.next);
      }

      return result;
   }

   public void follow(int followerId, int followeeId) {
       if(!userMap.containsKey(followerId)){
			User u = new User(followerId);
			userMap.put(followerId, u);
		}
		if(!userMap.containsKey(followeeId)){
			User u = new User(followeeId);
			userMap.put(followeeId, u);
		}
        userMap.get(followerId).follow(followeeId);
   }
    
        

   public void unfollow(int followerId, int followeeId) {
     if(!userMap.containsKey(followerId) || followerId==followeeId)
        return;
     userMap.get(followerId).unfollow(followeeId);
   }

 }  
