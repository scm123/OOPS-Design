class LRUCache {
    
   Map<Integer,ListNode> keyMap;
   ListNode  head; //doubly linked list head
   ListNode  tail; //doubly linked list head
   int listsize=0; 
   int capacity;
     
   class ListNode {
         int key;
         int value;   
         ListNode next;
         ListNode prev;
         ListNode( int key,int value){
           this.key=key;  
           this.value=value;
           this.prev=this.next=null;
         }
    }
    public void addFirst(ListNode node){
        if(head==null) {
            head=node;
            tail=node;
        }
        else{
            node.next=head;
            head.prev=node;
            head=node;
        }
    }
    
    public int removeLast(){
            ListNode node=tail.prev;
            node.next=null;
            tail.prev=null;
            int key=tail.key;
            tail=node;
            return key;
    }
    
    public void placeNodeInFront(ListNode node){
        ListNode lastNode=node.prev;
        ListNode nextNode=node.next;
        if(lastNode==null && nextNode==null ) return;//single node
        if(lastNode==null) return ;// itself first node
        if(nextNode==null) { //last node
            lastNode.next=null;
            node.next=head;
            head.prev=node;
            node.prev=null;
            head=node;
            tail=lastNode;
        }
        else{
            lastNode.next=node.next;
            nextNode.prev=lastNode;
            node.next=head;
            head.prev=node;
            node.prev=null;
            head=node;
        }
            
    }
    
    public LRUCache(int capacity) {
        keyMap=new HashMap<>();
        this.capacity=capacity;
        listsize=0; 
    }
    
    public int get(int key) {
        if(!keyMap.containsKey(key)) return -1;

         ListNode node=keyMap.get(key);
         placeNodeInFront(node);
        return node.value;
    }
    
    public void put(int key, int value) {
         if(!keyMap.containsKey(key)) {
             ListNode node=new ListNode(key,value);
             keyMap.put(key,node);
             addFirst(node);
             listsize++;
         }
         else{
             keyMap.get(key).value=value;
             ListNode node=keyMap.get(key);
             placeNodeInFront(node);
         }
         if(listsize>capacity) {
             int key1= removeLast();
             keyMap.remove(key1);
             listsize--;
         }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
